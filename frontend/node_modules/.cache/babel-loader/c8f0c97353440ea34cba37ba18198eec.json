{"ast":null,"code":"var _jsxFileName = \"/Users/Enrick/desafio09/src/components/Form/AsyncSelect/index.js\";\nimport React, { useRef, useEffect } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport PropTypes from 'prop-types';\nimport { useField } from '@rocketseat/unform';\nimport { Container } from './styles';\nexport default function ReactSelect({\n  name,\n  label,\n  options,\n  ...rest\n}) {\n  const ref = useRef(null);\n  const {\n    fieldName,\n    registerField,\n    error\n  } = useField(name);\n\n  function parseSelectValue(selectRef) {\n    const selectValue = selectRef.select.state.value;\n    return selectValue ? selectValue.id : '';\n  }\n\n  useEffect(() => {\n    if (ref.current) {\n      registerField({\n        name: fieldName,\n        ref: ref.current,\n        path: 'state.value',\n        parseValue: parseSelectValue,\n        clearValue: selectRef => {\n          selectRef.select.clearValue();\n        }\n      });\n    }\n  }, [ref]); // eslint-disable-line\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: selectRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, label), React.createElement(SelectField, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(AsyncSelect, Object.assign({\n    cacheOptions: true,\n    defaultOptions: true,\n    defaultValue: defaultValue,\n    ref: selectRef,\n    classNamePrefix: \"react-select\",\n    noOptionsMessage: () => 'Nenhum registro encontrado',\n    loadingMessage: () => 'Carregando...',\n    loadOptions: loadOptions,\n    placeholder: placeholder\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/Users/Enrick/desafio09/src/components/Form/AsyncSelect/index.js"],"names":["React","useRef","useEffect","AsyncSelect","PropTypes","useField","Container","ReactSelect","name","label","options","rest","ref","fieldName","registerField","error","parseSelectValue","selectRef","selectValue","select","state","value","id","current","path","parseValue","clearValue","defaultValue","loadOptions","placeholder"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA,eAAe,SAASC,WAAT,CAAqB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,OAAf;AAAwB,KAAGC;AAA3B,CAArB,EAAwD;AACrE,QAAMC,GAAG,GAAGX,MAAM,CAAC,IAAD,CAAlB;AAEA,QAAM;AAAEY,IAAAA,SAAF;AAAaC,IAAAA,aAAb;AAA4BC,IAAAA;AAA5B,MAAsCV,QAAQ,CAACG,IAAD,CAApD;;AAEA,WAASQ,gBAAT,CAA0BC,SAA1B,EAAqC;AACnC,UAAMC,WAAW,GAAGD,SAAS,CAACE,MAAV,CAAiBC,KAAjB,CAAuBC,KAA3C;AAEA,WAAOH,WAAW,GAAGA,WAAW,CAACI,EAAf,GAAoB,EAAtC;AACD;;AAEDpB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,GAAG,CAACW,OAAR,EAAiB;AACfT,MAAAA,aAAa,CAAC;AACZN,QAAAA,IAAI,EAAEK,SADM;AAEZD,QAAAA,GAAG,EAAEA,GAAG,CAACW,OAFG;AAGZC,QAAAA,IAAI,EAAE,aAHM;AAIZC,QAAAA,UAAU,EAAET,gBAJA;AAKZU,QAAAA,UAAU,EAAET,SAAS,IAAI;AACvBA,UAAAA,SAAS,CAACE,MAAV,CAAiBO,UAAjB;AACD;AAPW,OAAD,CAAb;AASD;AACF,GAZQ,EAYN,CAACd,GAAD,CAZM,CAAT,CAXqE,CAuB1D;;AAEX,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAEK,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BR,KAA5B,CADF,EAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AACE,IAAA,YAAY,MADd;AAEE,IAAA,cAAc,MAFhB;AAGE,IAAA,YAAY,EAAEkB,YAHhB;AAIE,IAAA,GAAG,EAAEV,SAJP;AAKE,IAAA,eAAe,EAAC,cALlB;AAME,IAAA,gBAAgB,EAAE,MAAM,4BAN1B;AAOE,IAAA,cAAc,EAAE,MAAM,eAPxB;AAQE,IAAA,WAAW,EAAEW,WARf;AASE,IAAA,WAAW,EAAEC;AATf,KAUMlB,IAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAFF,CADF;AAmBD","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport PropTypes from 'prop-types';\n\nimport { useField } from '@rocketseat/unform';\nimport { Container } from './styles';\n\nexport default function ReactSelect({ name, label, options, ...rest }) {\n  const ref = useRef(null);\n\n  const { fieldName, registerField, error } = useField(name);\n\n  function parseSelectValue(selectRef) {\n    const selectValue = selectRef.select.state.value;\n\n    return selectValue ? selectValue.id : '';\n  }\n\n  useEffect(() => {\n    if (ref.current) {\n      registerField({\n        name: fieldName,\n        ref: ref.current,\n        path: 'state.value',\n        parseValue: parseSelectValue,\n        clearValue: selectRef => {\n          selectRef.select.clearValue();\n        },\n      });\n    }\n  }, [ref]); // eslint-disable-line\n\n  return (\n    <Container>\n      <label htmlFor={selectRef}>{label}</label>\n      <SelectField>\n        <AsyncSelect\n          cacheOptions\n          defaultOptions\n          defaultValue={defaultValue}\n          ref={selectRef}\n          classNamePrefix=\"react-select\"\n          noOptionsMessage={() => 'Nenhum registro encontrado'}\n          loadingMessage={() => 'Carregando...'}\n          loadOptions={loadOptions}\n          placeholder={placeholder}\n          {...rest}\n        />\n      </SelectField>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}