{"ast":null,"code":"import { all, call, put, takeLatest } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport api from '../../../services/api';\nimport { createRecipientSuccess, createRecipientFailure, editRecipientFailure, editRecipientSuccess, updateRecipientFailure, updateRecipientSuccess } from './actions';\nimport history from '../../../services/history';\nexport function* editRecipient({\n  payload\n}) {\n  const {\n    id\n  } = payload;\n\n  try {\n    const response = yield call(api.get, `/recipients/${id}`);\n    yield put(editRecipientSuccess(response.data));\n    history.push('/destinatarios_edicao');\n  } catch ({\n    response\n  }) {\n    yield put(editRecipientFailure());\n    console.tron.log(response.data.error);\n    toast.error(response.data.error);\n  }\n}\nexport function* updateRecipient({\n  payload\n}) {\n  const {\n    id,\n    name,\n    street,\n    number,\n    complement,\n    state,\n    cit,\n    zipcode\n  } = payload.data;\n\n  try {\n    const response = yield call(api.put, `/deliveryman/${id}`, {\n      name,\n      email,\n      avatar_id\n    });\n    yield put(updateDeliverymanSuccess(response.data));\n    toast.success('Entregador atualizado!');\n    history.push('/entregadores');\n  } catch ({\n    response\n  }) {\n    yield put(updateDeliverymanFailure());\n    console.tron.log(response.data.error);\n  }\n}\nexport function* createRecipient({\n  payload\n}) {\n  const {\n    id,\n    name,\n    street,\n    number,\n    complement,\n    state,\n    city,\n    zipcode\n  } = payload.data;\n\n  try {\n    yield call(api.post, '/recipients', {\n      id,\n      name,\n      street,\n      number,\n      complement,\n      state,\n      city,\n      zipcode\n    });\n    yield put(createRecipientSuccess());\n    toast.success('Destinatário adicionado!');\n    history.push('/destinatarios');\n  } catch ({\n    response\n  }) {\n    yield put(createRecipientFailure());\n    console.tron.log(response.data.error);\n    toast.error(response.data.error);\n  }\n}\nexport default all([takeLatest('@recipient/EDIT_REQUEST', editRecipient), takeLatest('@recipient/UPDATE_REQUEST', updateRecipient), takeLatest('@recipient/CREATE_REQUEST', createRecipient)]);","map":{"version":3,"sources":["/Users/Enrick/desafio09/src/store/modules/recipient/sagas.js"],"names":["all","call","put","takeLatest","toast","api","createRecipientSuccess","createRecipientFailure","editRecipientFailure","editRecipientSuccess","updateRecipientFailure","updateRecipientSuccess","history","editRecipient","payload","id","response","get","data","push","console","tron","log","error","updateRecipient","name","street","number","complement","state","cit","zipcode","email","avatar_id","updateDeliverymanSuccess","success","updateDeliverymanFailure","createRecipient","city","post"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,SACEC,sBADF,EAEEC,sBAFF,EAGEC,oBAHF,EAIEC,oBAJF,EAKEC,sBALF,EAMEC,sBANF,QAOO,WAPP;AASA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAO,UAAUC,aAAV,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAAqC;AAC1C,QAAM;AAAEC,IAAAA;AAAF,MAASD,OAAf;;AAEA,MAAI;AACF,UAAME,QAAQ,GAAG,MAAMf,IAAI,CAACI,GAAG,CAACY,GAAL,EAAW,eAAcF,EAAG,EAA5B,CAA3B;AAEA,UAAMb,GAAG,CAACO,oBAAoB,CAACO,QAAQ,CAACE,IAAV,CAArB,CAAT;AAEAN,IAAAA,OAAO,CAACO,IAAR,CAAa,uBAAb;AACD,GAND,CAME,OAAO;AAAEH,IAAAA;AAAF,GAAP,EAAqB;AACrB,UAAMd,GAAG,CAACM,oBAAoB,EAArB,CAAT;AACAY,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBN,QAAQ,CAACE,IAAT,CAAcK,KAA/B;AACAnB,IAAAA,KAAK,CAACmB,KAAN,CAAYP,QAAQ,CAACE,IAAT,CAAcK,KAA1B;AACD;AACF;AAED,OAAO,UAAUC,eAAV,CAA0B;AAAEV,EAAAA;AAAF,CAA1B,EAAuC;AAC5C,QAAM;AACJC,IAAAA,EADI;AAEJU,IAAAA,IAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,KANI;AAOJC,IAAAA,GAPI;AAQJC,IAAAA;AARI,MASFjB,OAAO,CAACI,IATZ;;AAWA,MAAI;AACF,UAAMF,QAAQ,GAAG,MAAMf,IAAI,CAACI,GAAG,CAACH,GAAL,EAAW,gBAAea,EAAG,EAA7B,EAAgC;AACzDU,MAAAA,IADyD;AAEzDO,MAAAA,KAFyD;AAGzDC,MAAAA;AAHyD,KAAhC,CAA3B;AAMA,UAAM/B,GAAG,CAACgC,wBAAwB,CAAClB,QAAQ,CAACE,IAAV,CAAzB,CAAT;AAEAd,IAAAA,KAAK,CAAC+B,OAAN,CAAc,wBAAd;AAEAvB,IAAAA,OAAO,CAACO,IAAR,CAAa,eAAb;AACD,GAZD,CAYE,OAAO;AAAEH,IAAAA;AAAF,GAAP,EAAqB;AACrB,UAAMd,GAAG,CAACkC,wBAAwB,EAAzB,CAAT;AACAhB,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBN,QAAQ,CAACE,IAAT,CAAcK,KAA/B;AACD;AACF;AAED,OAAO,UAAUc,eAAV,CAA0B;AAAEvB,EAAAA;AAAF,CAA1B,EAAuC;AAC5C,QAAM;AACJC,IAAAA,EADI;AAEJU,IAAAA,IAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,UALI;AAMJC,IAAAA,KANI;AAOJS,IAAAA,IAPI;AAQJP,IAAAA;AARI,MASFjB,OAAO,CAACI,IATZ;;AAWA,MAAI;AACF,UAAMjB,IAAI,CAACI,GAAG,CAACkC,IAAL,EAAW,aAAX,EAA0B;AAClCxB,MAAAA,EADkC;AAElCU,MAAAA,IAFkC;AAGlCC,MAAAA,MAHkC;AAIlCC,MAAAA,MAJkC;AAKlCC,MAAAA,UALkC;AAMlCC,MAAAA,KANkC;AAOlCS,MAAAA,IAPkC;AAQlCP,MAAAA;AARkC,KAA1B,CAAV;AAWA,UAAM7B,GAAG,CAACI,sBAAsB,EAAvB,CAAT;AAEAF,IAAAA,KAAK,CAAC+B,OAAN,CAAc,0BAAd;AAEAvB,IAAAA,OAAO,CAACO,IAAR,CAAa,gBAAb;AACD,GAjBD,CAiBE,OAAO;AAAEH,IAAAA;AAAF,GAAP,EAAqB;AACrB,UAAMd,GAAG,CAACK,sBAAsB,EAAvB,CAAT;AACAa,IAAAA,OAAO,CAACC,IAAR,CAAaC,GAAb,CAAiBN,QAAQ,CAACE,IAAT,CAAcK,KAA/B;AACAnB,IAAAA,KAAK,CAACmB,KAAN,CAAYP,QAAQ,CAACE,IAAT,CAAcK,KAA1B;AACD;AACF;AAED,eAAevB,GAAG,CAAC,CACjBG,UAAU,CAAC,yBAAD,EAA4BU,aAA5B,CADO,EAEjBV,UAAU,CAAC,2BAAD,EAA8BqB,eAA9B,CAFO,EAGjBrB,UAAU,CAAC,2BAAD,EAA8BkC,eAA9B,CAHO,CAAD,CAAlB","sourcesContent":["import { all, call, put, takeLatest } from 'redux-saga/effects';\n\nimport { toast } from 'react-toastify';\n\nimport api from '../../../services/api';\n\nimport {\n  createRecipientSuccess,\n  createRecipientFailure,\n  editRecipientFailure,\n  editRecipientSuccess,\n  updateRecipientFailure,\n  updateRecipientSuccess,\n} from './actions';\n\nimport history from '../../../services/history';\n\nexport function* editRecipient({ payload }) {\n  const { id } = payload;\n\n  try {\n    const response = yield call(api.get, `/recipients/${id}`);\n\n    yield put(editRecipientSuccess(response.data));\n\n    history.push('/destinatarios_edicao');\n  } catch ({ response }) {\n    yield put(editRecipientFailure());\n    console.tron.log(response.data.error);\n    toast.error(response.data.error);\n  }\n}\n\nexport function* updateRecipient({ payload }) {\n  const {\n    id,\n    name,\n    street,\n    number,\n    complement,\n    state,\n    cit,\n    zipcode,\n  } = payload.data;\n\n  try {\n    const response = yield call(api.put, `/deliveryman/${id}`, {\n      name,\n      email,\n      avatar_id,\n    });\n\n    yield put(updateDeliverymanSuccess(response.data));\n\n    toast.success('Entregador atualizado!');\n\n    history.push('/entregadores');\n  } catch ({ response }) {\n    yield put(updateDeliverymanFailure());\n    console.tron.log(response.data.error);\n  }\n}\n\nexport function* createRecipient({ payload }) {\n  const {\n    id,\n    name,\n    street,\n    number,\n    complement,\n    state,\n    city,\n    zipcode,\n  } = payload.data;\n\n  try {\n    yield call(api.post, '/recipients', {\n      id,\n      name,\n      street,\n      number,\n      complement,\n      state,\n      city,\n      zipcode,\n    });\n\n    yield put(createRecipientSuccess());\n\n    toast.success('Destinatário adicionado!');\n\n    history.push('/destinatarios');\n  } catch ({ response }) {\n    yield put(createRecipientFailure());\n    console.tron.log(response.data.error);\n    toast.error(response.data.error);\n  }\n}\n\nexport default all([\n  takeLatest('@recipient/EDIT_REQUEST', editRecipient),\n  takeLatest('@recipient/UPDATE_REQUEST', updateRecipient),\n  takeLatest('@recipient/CREATE_REQUEST', createRecipient),\n]);\n"]},"metadata":{},"sourceType":"module"}