{"ast":null,"code":"var _jsxFileName = \"/Users/Enrick/desafio09/src/components/DeliveryForm/DeliverymanInput/index.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport { useField } from '@unform/core';\nimport api from '../../../services/api';\nexport default function DeliverymanInput({\n  name,\n  ...rest\n}) {\n  const [deliverymans, setDeliverymans] = useState([]);\n  const selectRef = useRef(null);\n  const {\n    registerField,\n    defaultValue,\n    fieldName\n  } = useField(name);\n  useEffect(() => {\n    async function loadData() {\n      const response = await api.get('/deliveryman', {\n        params: {\n          name: ''\n        }\n      });\n      const data = response.data.map(deliveryman => ({\n        value: deliveryman.id,\n        label: deliveryman.name\n      }));\n      setDeliverymans(data);\n    }\n\n    loadData();\n  }, []);\n\n  const filterColors = inputValue => {\n    return deliverymans.filter(i => i.label.toLowerCase().includes(inputValue.toLowerCase()));\n  };\n\n  const promiseOptions = inputValue => new Promise(resolve => {\n    resolve(filterColors(inputValue));\n  });\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'select.state.value',\n      getValue: ref => {\n        if (rest.isMulti) {\n          if (!ref.select.state.value) {\n            return [];\n          }\n\n          return ref.select.state.value.map(option => option.value);\n        }\n\n        if (!ref.select.state.value) {\n          return '';\n        }\n\n        return ref.select.state.value.value;\n      }\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n  return React.createElement(AsyncSelect, Object.assign({\n    cacheOptions: true,\n    defaultOptions: deliverymans,\n    loadOptions: promiseOptions,\n    defaultValue: defaultValue,\n    ref: selectRef,\n    classNamePrefix: \"react-select\"\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/Enrick/desafio09/src/components/DeliveryForm/DeliverymanInput/index.js"],"names":["React","useState","useRef","useEffect","AsyncSelect","useField","api","DeliverymanInput","name","rest","deliverymans","setDeliverymans","selectRef","registerField","defaultValue","fieldName","loadData","response","get","params","data","map","deliveryman","value","id","label","filterColors","inputValue","filter","i","toLowerCase","includes","promiseOptions","Promise","resolve","ref","current","path","getValue","isMulti","select","state","option"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport { useField } from '@unform/core';\n\nimport api from '../../../services/api';\n\nexport default function DeliverymanInput({ name, ...rest }) {\n  const [deliverymans, setDeliverymans] = useState([]);\n\n  const selectRef = useRef(null);\n  const { registerField, defaultValue, fieldName } = useField(name);\n\n  useEffect(() => {\n    async function loadData() {\n      const response = await api.get('/deliveryman', {\n        params: {\n          name: '',\n        },\n      });\n\n      const data = response.data.map(deliveryman => ({\n        value: deliveryman.id,\n        label: deliveryman.name,\n      }));\n\n      setDeliverymans(data);\n    }\n    loadData();\n  }, []);\n\n  const filterColors = inputValue => {\n    return deliverymans.filter(i =>\n      i.label.toLowerCase().includes(inputValue.toLowerCase()),\n    );\n  };\n\n  const promiseOptions = inputValue =>\n    new Promise(resolve => {\n      resolve(filterColors(inputValue));\n    });\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'select.state.value',\n      getValue: ref => {\n        if (rest.isMulti) {\n          if (!ref.select.state.value) {\n            return [];\n          }\n          return ref.select.state.value.map(option => option.value);\n        }\n        if (!ref.select.state.value) {\n          return '';\n        }\n        return ref.select.state.value.value;\n      },\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n\n  return (\n    <AsyncSelect\n      cacheOptions\n      defaultOptions={deliverymans}\n      loadOptions={promiseOptions}\n      defaultValue={defaultValue}\n      ref={selectRef}\n      classNamePrefix=\"react-select\"\n      {...rest}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}