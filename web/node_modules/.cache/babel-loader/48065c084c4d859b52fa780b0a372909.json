{"ast":null,"code":"var _jsxFileName = \"/Users/Enrick/desafio09/src/components/Form/AsyncSelect/index.js\";\nimport React, { useRef, useEffect } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\nexport default function Select({\n  name,\n  label,\n  placeholder,\n  ...rest\n}) {\n  const selectRef = useRef(null);\n  const {\n    registerField,\n    defaultValue,\n    fieldName\n  } = useField(name);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'select.state.value',\n      getValue: ref => {\n        if (rest.isMulti) {\n          if (!ref.select.state.value) {\n            return [];\n          }\n\n          return ref.select.state.value.map(option => option.value);\n        }\n\n        if (!ref.select.state.value) {\n          return '';\n        }\n\n        return ref.select.state.value.value;\n      }\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: selectRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, label), React.createElement(Select, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(AsyncSelect, Object.assign({\n    cacheOptions: true,\n    defaultOptions: true,\n    defaultValue: defaultValue,\n    ref: selectRef,\n    classNamePrefix: \"react-select\",\n    noOptionsMessage: () => 'Nenhum registro encontrado',\n    loadingMessage: () => 'Carregando...',\n    placeholder: placeholder\n  }, rest, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/Users/Enrick/desafio09/src/components/Form/AsyncSelect/index.js"],"names":["React","useRef","useEffect","AsyncSelect","useField","Container","Select","name","label","placeholder","rest","selectRef","registerField","defaultValue","fieldName","ref","current","path","getValue","isMulti","select","state","value","map","option"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,UAA1B;AAEA,eAAe,SAASC,MAAT,CAAgB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA,WAAf;AAA4B,KAAGC;AAA/B,CAAhB,EAAuD;AACpE,QAAMC,SAAS,GAAGV,MAAM,CAAC,IAAD,CAAxB;AACA,QAAM;AAAEW,IAAAA,aAAF;AAAiBC,IAAAA,YAAjB;AAA+BC,IAAAA;AAA/B,MAA6CV,QAAQ,CAACG,IAAD,CAA3D;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,aAAa,CAAC;AACZL,MAAAA,IAAI,EAAEO,SADM;AAEZC,MAAAA,GAAG,EAAEJ,SAAS,CAACK,OAFH;AAGZC,MAAAA,IAAI,EAAE,oBAHM;AAIZC,MAAAA,QAAQ,EAAEH,GAAG,IAAI;AACf,YAAIL,IAAI,CAACS,OAAT,EAAkB;AAChB,cAAI,CAACJ,GAAG,CAACK,MAAJ,CAAWC,KAAX,CAAiBC,KAAtB,EAA6B;AAC3B,mBAAO,EAAP;AACD;;AACD,iBAAOP,GAAG,CAACK,MAAJ,CAAWC,KAAX,CAAiBC,KAAjB,CAAuBC,GAAvB,CAA2BC,MAAM,IAAIA,MAAM,CAACF,KAA5C,CAAP;AACD;;AACD,YAAI,CAACP,GAAG,CAACK,MAAJ,CAAWC,KAAX,CAAiBC,KAAtB,EAA6B;AAC3B,iBAAO,EAAP;AACD;;AACD,eAAOP,GAAG,CAACK,MAAJ,CAAWC,KAAX,CAAiBC,KAAjB,CAAuBA,KAA9B;AACD;AAfW,KAAD,CAAb;AAiBD,GAlBQ,EAkBN,CAACR,SAAD,EAAYF,aAAZ,EAA2BF,IAAI,CAACS,OAAhC,CAlBM,CAAT;AAoBA,SACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAER,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BH,KAA5B,CADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AACE,IAAA,YAAY,MADd;AAEE,IAAA,cAAc,MAFhB;AAGE,IAAA,YAAY,EAAEK,YAHhB;AAIE,IAAA,GAAG,EAAEF,SAJP;AAKE,IAAA,eAAe,EAAC,cALlB;AAME,IAAA,gBAAgB,EAAE,MAAM,4BAN1B;AAOE,IAAA,cAAc,EAAE,MAAM,eAPxB;AAQE,IAAA,WAAW,EAAEF;AARf,KASMC,IATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAFF,CADF;AAkBD","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport AsyncSelect from 'react-select/async';\nimport { useField } from '@unform/core';\n\nimport { Container } from './styles';\n\nexport default function Select({ name, label, placeholder, ...rest }) {\n  const selectRef = useRef(null);\n  const { registerField, defaultValue, fieldName } = useField(name);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: selectRef.current,\n      path: 'select.state.value',\n      getValue: ref => {\n        if (rest.isMulti) {\n          if (!ref.select.state.value) {\n            return [];\n          }\n          return ref.select.state.value.map(option => option.value);\n        }\n        if (!ref.select.state.value) {\n          return '';\n        }\n        return ref.select.state.value.value;\n      },\n    });\n  }, [fieldName, registerField, rest.isMulti]);\n\n  return (\n    <Container>\n      <label htmlFor={selectRef}>{label}</label>\n      <Select>\n        <AsyncSelect\n          cacheOptions\n          defaultOptions\n          defaultValue={defaultValue}\n          ref={selectRef}\n          classNamePrefix=\"react-select\"\n          noOptionsMessage={() => 'Nenhum registro encontrado'}\n          loadingMessage={() => 'Carregando...'}\n          placeholder={placeholder}\n          {...rest}\n        />\n      </Select>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}